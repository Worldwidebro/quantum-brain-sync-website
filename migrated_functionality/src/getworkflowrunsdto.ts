/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkflowRunStepsDetailsDto,
  WorkflowRunStepsDetailsDto$inboundSchema,
  WorkflowRunStepsDetailsDto$Outbound,
  WorkflowRunStepsDetailsDto$outboundSchema,
} from "./workflowrunstepsdetailsdto.js";

/**
 * Workflow run status
 */
export const Status = {
  Processing: "processing",
  Completed: "completed",
  Error: "error",
} as const;
/**
 * Workflow run status
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * Workflow run delivery lifecycle status
 */
export const DeliveryLifecycleStatus = {
  Pending: "pending",
  Sent: "sent",
  Errored: "errored",
  Skipped: "skipped",
  Canceled: "canceled",
  Merged: "merged",
  Delivered: "delivered",
  Interacted: "interacted",
} as const;
/**
 * Workflow run delivery lifecycle status
 */
export type DeliveryLifecycleStatus = ClosedEnum<
  typeof DeliveryLifecycleStatus
>;

/**
 * Severity
 */
export const Severity = {
  High: "high",
  Medium: "medium",
  Low: "low",
  None: "none",
} as const;
/**
 * Severity
 */
export type Severity = ClosedEnum<typeof Severity>;

export type GetWorkflowRunsDto = {
  /**
   * Workflow run id
   */
  id: string;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Workflow name
   */
  workflowName: string;
  /**
   * Organization identifier
   */
  organizationId: string;
  /**
   * Environment identifier
   */
  environmentId: string;
  /**
   * Internal subscriber identifier
   */
  internalSubscriberId: string;
  /**
   * External subscriber identifier
   */
  subscriberId?: string | undefined;
  /**
   * Workflow run status
   */
  status: Status;
  /**
   * Workflow run delivery lifecycle status
   */
  deliveryLifecycleStatus: DeliveryLifecycleStatus;
  /**
   * Trigger identifier
   */
  triggerIdentifier: string;
  /**
   * Transaction identifier
   */
  transactionId: string;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * Update timestamp
   */
  updatedAt: string;
  /**
   * Severity
   */
  severity: Severity;
  /**
   * Critical flag
   */
  critical: boolean;
  /**
   * Workflow run steps
   */
  steps: Array<WorkflowRunStepsDetailsDto>;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const DeliveryLifecycleStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeliveryLifecycleStatus
> = z.nativeEnum(DeliveryLifecycleStatus);

/** @internal */
export const DeliveryLifecycleStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeliveryLifecycleStatus
> = DeliveryLifecycleStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryLifecycleStatus$ {
  /** @deprecated use `DeliveryLifecycleStatus$inboundSchema` instead. */
  export const inboundSchema = DeliveryLifecycleStatus$inboundSchema;
  /** @deprecated use `DeliveryLifecycleStatus$outboundSchema` instead. */
  export const outboundSchema = DeliveryLifecycleStatus$outboundSchema;
}

/** @internal */
export const Severity$inboundSchema: z.ZodNativeEnum<typeof Severity> = z
  .nativeEnum(Severity);

/** @internal */
export const Severity$outboundSchema: z.ZodNativeEnum<typeof Severity> =
  Severity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Severity$ {
  /** @deprecated use `Severity$inboundSchema` instead. */
  export const inboundSchema = Severity$inboundSchema;
  /** @deprecated use `Severity$outboundSchema` instead. */
  export const outboundSchema = Severity$outboundSchema;
}

/** @internal */
export const GetWorkflowRunsDto$inboundSchema: z.ZodType<
  GetWorkflowRunsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  workflowId: z.string(),
  workflowName: z.string(),
  organizationId: z.string(),
  environmentId: z.string(),
  internalSubscriberId: z.string(),
  subscriberId: z.string().optional(),
  status: Status$inboundSchema,
  deliveryLifecycleStatus: DeliveryLifecycleStatus$inboundSchema,
  triggerIdentifier: z.string(),
  transactionId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  severity: Severity$inboundSchema,
  critical: z.boolean(),
  steps: z.array(WorkflowRunStepsDetailsDto$inboundSchema),
});

/** @internal */
export type GetWorkflowRunsDto$Outbound = {
  id: string;
  workflowId: string;
  workflowName: string;
  organizationId: string;
  environmentId: string;
  internalSubscriberId: string;
  subscriberId?: string | undefined;
  status: string;
  deliveryLifecycleStatus: string;
  triggerIdentifier: string;
  transactionId: string;
  createdAt: string;
  updatedAt: string;
  severity: string;
  critical: boolean;
  steps: Array<WorkflowRunStepsDetailsDto$Outbound>;
};

/** @internal */
export const GetWorkflowRunsDto$outboundSchema: z.ZodType<
  GetWorkflowRunsDto$Outbound,
  z.ZodTypeDef,
  GetWorkflowRunsDto
> = z.object({
  id: z.string(),
  workflowId: z.string(),
  workflowName: z.string(),
  organizationId: z.string(),
  environmentId: z.string(),
  internalSubscriberId: z.string(),
  subscriberId: z.string().optional(),
  status: Status$outboundSchema,
  deliveryLifecycleStatus: DeliveryLifecycleStatus$outboundSchema,
  triggerIdentifier: z.string(),
  transactionId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  severity: Severity$outboundSchema,
  critical: z.boolean(),
  steps: z.array(WorkflowRunStepsDetailsDto$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowRunsDto$ {
  /** @deprecated use `GetWorkflowRunsDto$inboundSchema` instead. */
  export const inboundSchema = GetWorkflowRunsDto$inboundSchema;
  /** @deprecated use `GetWorkflowRunsDto$outboundSchema` instead. */
  export const outboundSchema = GetWorkflowRunsDto$outboundSchema;
  /** @deprecated use `GetWorkflowRunsDto$Outbound` instead. */
  export type Outbound = GetWorkflowRunsDto$Outbound;
}

export function getWorkflowRunsDtoToJSON(
  getWorkflowRunsDto: GetWorkflowRunsDto,
): string {
  return JSON.stringify(
    GetWorkflowRunsDto$outboundSchema.parse(getWorkflowRunsDto),
  );
}

export function getWorkflowRunsDtoFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkflowRunsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkflowRunsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkflowRunsDto' from JSON`,
  );
}
